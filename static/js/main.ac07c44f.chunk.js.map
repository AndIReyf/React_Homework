{"version":3,"sources":["TodoList/TodoList.module.scss","Chat/Dialog/Dialog.module.scss","Task3/Task3.module.scss","Chat/Avatar/Avatar.module.scss","Chat/Chat.module.scss","Chat/Avatar/avatar.jpeg","Chat/Avatar/Avatar.tsx","Chat/Dialog/Dialog.tsx","Chat/Chat.tsx","TodoList/TodoList.tsx","common/Button/Button.tsx","common/Input/Input.tsx","Task3/Task3.tsx","common/Checkbox/Checkbox.tsx","Task4/Task4.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Avatar","className","style","avatarBox","avatar","src","Ava","alt","Dialog","props","dialogBox","name","message","text","time","postTime","Chat","chatBox","TodoList","todoListBox","wrap","title","tasks","map","t","key","id","tasksList","deleteBtn","onClick","deleteTask","task","n","priority","p","buttonBox","btn","filterTasks","Button","btnName","value","undefined","btnClass","btnStyle","Input","error","type","placeholder","onChange","onKeyPress","Task3","useState","inpValue","setInpValue","showAlert","alert","showUserName","trim","addUser","task3Box","inpBox","e","currentTarget","charCode","users","u","Checkbox","checked","setChecked","data-value","Task4","App","setTasks","filter","setFilter","user","setUser","filteredTasks","newUser","v1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ac07c44f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoListBox\":\"TodoList_todoListBox__2fW1v\",\"wrap\":\"TodoList_wrap__21vjW\",\"tasksList\":\"TodoList_tasksList__3ZiZL\",\"task\":\"TodoList_task__2YqL3\",\"priority\":\"TodoList_priority__WlAMf\",\"deleteBtn\":\"TodoList_deleteBtn__1DHGB\",\"buttonBox\":\"TodoList_buttonBox__nG7rG\",\"btn\":\"TodoList_btn__VgzKT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogBox\":\"Dialog_dialogBox__lPFot\",\"name\":\"Dialog_name__3gfYl\",\"text\":\"Dialog_text__3Q3jc\",\"time\":\"Dialog_time__1BF8x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task3Box\":\"Task3_task3Box__1KU7j\",\"inpBox\":\"Task3_inpBox__1Ww0r\",\"name\":\"Task3_name__I8FPb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarBox\":\"Avatar_avatarBox__3QFVM\",\"avatar\":\"Avatar_avatar__O24P0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatBox\":\"Chat_chatBox__2RjxZ\"};","module.exports = __webpack_public_path__ + \"static/media/avatar.c3f042ec.jpeg\";","import React from \"react\";\r\nimport Ava from \"./avatar.jpeg\";\r\nimport style from \"./Avatar.module.scss\";\r\n\r\nconst Avatar = () => {\r\n    return (\r\n        <div className={style.avatarBox}>\r\n            <img className={style.avatar} src={Ava} alt=\"Avatar\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Avatar;","import React from \"react\";\r\nimport style from \"./Dialog.module.scss\";\r\n\r\ntype MessageType = {\r\n    name: string,\r\n    text: string,\r\n    postTime: string\r\n}\r\n\r\ntype PropsType = {\r\n    message: Array<MessageType>\r\n}\r\n\r\nconst Dialog = (props: PropsType) => {\r\n    return (\r\n        <div className={style.dialogBox}>\r\n            <div>\r\n                <div className={style.name}>{props.message[0].name}</div>\r\n                <div className={style.text}>{props.message[0].text}</div>\r\n            </div>\r\n            <div className={style.time}>{props.message[0].postTime}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import React from \"react\";\r\nimport style from \"./Chat.module.scss\";\r\nimport Avatar from \"./Avatar/Avatar\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\n\r\nconst Chat = () => {\r\n\r\n    const message = [\r\n        {name: 'Andrey', text: 'I love React!', postTime: '12:30'}\r\n    ];\r\n\r\n    return (\r\n        <div className={style.chatBox}>\r\n            <Avatar/>\r\n            <Dialog message={message} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React from \"react\";\r\nimport style from './TodoList.module.scss';\r\nimport {FilterType} from \"../App\";\r\n\r\nexport type TaskType = {\r\n    id: number\r\n    n: string\r\n    p: string\r\n}\r\nexport type TitleType = string\r\n\r\ntype PropsType = {\r\n    tasks: Array<TaskType>\r\n    title: TitleType\r\n    deleteTask: (id: number) => void\r\n    filterTasks: (value: FilterType) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n    return (\r\n        <div className={style.todoListBox}>\r\n            <div className={style.wrap}>\r\n            <h1 className={style.title}>{props.title}</h1>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => <li key={t.id} className={style.tasksList}>\r\n                        <button className={style.deleteBtn} onClick={() => {props.deleteTask(t.id)}}><span></span></button>\r\n                        <span className={style.task}>{t.n}</span>\r\n                        <span className={style.priority}>{t.p}</span>\r\n                    </li>)\r\n                }\r\n            </ul>\r\n            <div className={style.buttonBox}>\r\n                <button className={style.btn} onClick={() => {props.filterTasks('all')}}>All</button>\r\n                <button className={style.btn} onClick={() => {props.filterTasks('low')}}>Low</button>\r\n                <button className={style.btn} onClick={() => {props.filterTasks('middle')}}>Middle</button>\r\n                <button className={style.btn} onClick={() => {props.filterTasks('high')}}>High</button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport './Button.scss';\r\n\r\ntype PropsType = {\r\n    btnStyle?: string\r\n    onClick: () => void\r\n}\r\n\r\nexport function Button(props: PropsType) {\r\n\r\n    let btnName: string | undefined;\r\n    const btnClass = (value: string | undefined) => {\r\n        if (value === undefined) {\r\n            btnName = 'Default';\r\n            return `btn`;\r\n        }\r\n\r\n        btnName = value;\r\n\r\n        switch (value) {\r\n            case 'Add': {\r\n                return `btn ${value}`;\r\n            }\r\n            case 'Del': {\r\n                return `btn ${value}`;\r\n            }\r\n            default: {\r\n                return `btn`;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'btnBox'}>\r\n            <button className={btnClass(props.btnStyle)}\r\n                    onClick={props.onClick}>\r\n                {btnName}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport './Input.scss';\r\n\r\ntype PropsType = {\r\n    error?: boolean\r\n    placeholder: string\r\n    type: string\r\n    value: string\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onKeyPress?: (e: KeyboardEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function Input(props: PropsType) {\r\n\r\n    const isInpEmpty = (value: string) => value === '';\r\n    const inpError = (error: boolean | undefined) => {\r\n        if (error && !isInpEmpty(props.value)) {\r\n            return 'inp error';\r\n        } else {\r\n            return 'inp';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={'inputBox'}>\r\n            <input className={inpError(props.error)}\r\n                   type={props.type}\r\n                   value={props.value}\r\n                   placeholder={props.placeholder}\r\n                   onChange={props.onChange}\r\n                   onKeyPress={props.onKeyPress}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport style from './Task3.module.scss';\r\nimport {Button} from \"../common/Button/Button\";\r\nimport {Input} from \"../common/Input/Input\";\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    addUser: (value: string) => void\r\n}\r\n\r\nexport type UserType = {\r\n    id?: string\r\n    name?: string\r\n}\r\n\r\nexport function Task3(props: PropsType) {\r\n\r\n    const placeholderValue: string = 'Enter your name...';\r\n    const typeInput: string = 'text';\r\n    const [inpValue, setInpValue] = useState<string>('');\r\n    const isInpEmpty = (value: string) => value.trim() === '';\r\n    const showAlert = (value: string) => {\r\n        setInpValue('');\r\n        alert(value);\r\n    }\r\n    const showErrorAlert = () => showAlert('Input is empty. Please enter your name!');\r\n    const showSuccessAlert = (name: string) =>  showAlert(`Hi ${name.trim()}, welcome to samurai's way!`);\r\n    const showUserName = () => {\r\n        if (isInpEmpty(inpValue)) {\r\n            showErrorAlert();\r\n        }\r\n        else {\r\n            props.addUser(inpValue);\r\n            showSuccessAlert(inpValue);\r\n        }\r\n    }\r\n    const onInpValueChange = (e: ChangeEvent<HTMLInputElement>) => setInpValue(e.currentTarget.value);\r\n    const onKeyPressInInput = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            showUserName();\r\n        }\r\n    }\r\n    const addNewUserName = () => showUserName();\r\n\r\n    return (\r\n        <div className={style.task3Box}>\r\n            <h3>Task3</h3>\r\n            <div className={style.inpBox}>\r\n                <Input placeholder={placeholderValue}\r\n                       type={typeInput}\r\n                       value={inpValue}\r\n                       onChange={onInpValueChange}\r\n                       onKeyPress={onKeyPressInInput}\r\n                />\r\n                <Button btnStyle={'Add'}\r\n                        onClick={addNewUserName}\r\n                />\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.users.map(u => <li key={u.id} className={style.name}>\r\n                        {u.name}\r\n                    </li>)\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport './Checkbox.scss';\r\n\r\nexport function Checkbox() {\r\n\r\n    const [checked, setChecked] = useState(false);\r\n    const isChecked = () => checked ? setChecked(false) : setChecked( true);\r\n\r\n    return (\r\n        <div className={'checkboxContainer'}>\r\n            <div data-value={checked}\r\n                 className={'checkbox'}\r\n                 onClick={isChecked}>\r\n                {\r\n                    checked && <div className={'check'}> </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport './Task4.css';\r\nimport {Button} from \"../common/Button/Button\";\r\nimport {Input} from \"../common/Input/Input\";\r\nimport {Checkbox} from \"../common/Checkbox/Checkbox\";\r\n\r\ntype BtnType = 'Add' | 'Del' | string;\r\n\r\nexport function Task4() {\r\n\r\n    const type = 'text';\r\n    const btnStyle: BtnType = 'Del';\r\n    const error: boolean = true;\r\n    const placeholderText: string = 'Enter here...';\r\n    const [inpValue, setInpValue] = useState('');\r\n    const onInpValueChange = (e: ChangeEvent<HTMLInputElement>) => setInpValue(e.currentTarget.value);\r\n\r\n    return (\r\n        <div className={'task4'}>\r\n            <Checkbox />\r\n            <Input error={error}\r\n                   type={type}\r\n                   value={inpValue}\r\n                   placeholder={placeholderText}\r\n                   onChange={onInpValueChange}\r\n            />\r\n            <Button btnStyle={btnStyle}\r\n                    onClick={() => {}}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Chat from \"./Chat/Chat\";\r\nimport {TaskType, TitleType, TodoList} from \"./TodoList/TodoList\";\r\nimport {Task3, UserType} from \"./Task3/Task3\";\r\nimport {v1} from \"uuid\";\r\nimport {Task4} from \"./Task4/Task4\";\r\n\r\nexport type FilterType = 'all' | 'low' | 'middle' | 'high';\r\n\r\nfunction App() {\r\n    let title: TitleType = 'My tasks to do';\r\n\r\n    let [tasks, setTasks] = useState<Array<TaskType>>([\r\n        {id: 1, n: \"Work\", p: \"high\"},\r\n        {id: 2, n: \"Anime\", p: \"low\"},\r\n        {id: 3, n: \"Games\", p: \"middle\"},\r\n        {id: 4, n: \"React\", p: \"high\"},\r\n        {id: 5, n: \"HTML&SCSS\", p: \"low\"}\r\n    ])\r\n\r\n    let [filter, setFilter] = useState<FilterType>('all');\r\n\r\n    const [user, setUser] = useState<Array<UserType>>([]);\r\n\r\n    const deleteTask = (id: number) => {\r\n        setTasks(tasks.filter(t => t.id !== id));\r\n    }\r\n    const filterTasks = (value: FilterType) => {\r\n        setFilter(value);\r\n    }\r\n\r\n    let filteredTasks = tasks;\r\n    switch (filter) {\r\n        case \"low\": {\r\n            filteredTasks = tasks.filter(t => t.p === 'low');\r\n            break;\r\n        }case \"middle\": {\r\n            filteredTasks = tasks.filter(t => t.p === 'middle');\r\n            break;\r\n        }\r\n        case \"high\": {\r\n            filteredTasks = tasks.filter(t => t.p === 'high');\r\n            break;\r\n        }\r\n    }\r\n\r\n    const addUser = (value: string) => {\r\n        let newUser = {id: v1(), name: value};\r\n        setUser([newUser, ...user]);\r\n    }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Chat />\r\n      <TodoList tasks={filteredTasks}\r\n                title={title}\r\n                deleteTask={deleteTask}\r\n                filterTasks={filterTasks}\r\n      />\r\n      <Task3 users={user}\r\n             addUser={addUser}\r\n      />\r\n      <Task4 />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}